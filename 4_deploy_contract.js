/* 4_deploy_contract.js
*  Deploy HelloWord Contract using web3.js
*  
*/

const Tx = require('ethereumjs-tx').Transaction
const Web3 = require('web3')

var web3 = new Web3(new Web3.providers.HttpProvider(
    'https://ropsten.infura.io/v3/073e0f5c27fc45e48ac3e3ee142b70b9'
));

const account1 = '0x7540d0B3cd936945043a5d3F244167352D5a031f'

// Private key for account, private key are exported locally 
// using environment variable
const privateKey1Buffer = Buffer.from(process.env.PRIVATE_KEY_1, 'hex')

// Data from Deployed contract
const data = '0x608060405234801561001057600080fd5b506104c1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063368b877214610046578063e21f37ce14610062578063e762c7c614610080575b600080fd5b610060600480360381019061005b9190610269565b61009c565b005b61006a6100b6565b60405161007791906102e3565b60405180910390f35b61009a60048036038101906100959190610269565b610144565b005b80600090805190602001906100b292919061015e565b5050565b600080546100c3906103b9565b80601f01602080910402602001604051908101604052809291908181526020018280546100ef906103b9565b801561013c5780601f106101115761010080835404028352916020019161013c565b820191906000526020600020905b81548152906001019060200180831161011f57829003601f168201915b505050505081565b806000908051906020019061015a92919061015e565b5050565b82805461016a906103b9565b90600052602060002090601f01602090048101928261018c57600085556101d3565b82601f106101a557805160ff19168380011785556101d3565b828001600101855582156101d3579182015b828111156101d25782518255916020019190600101906101b7565b5b5090506101e091906101e4565b5090565b5b808211156101fd5760008160009055506001016101e5565b5090565b600061021461020f8461032a565b610305565b90508281526020810184848401111561022c57600080fd5b610237848285610377565b509392505050565b600082601f83011261025057600080fd5b8135610260848260208601610201565b91505092915050565b60006020828403121561027b57600080fd5b600082013567ffffffffffffffff81111561029557600080fd5b6102a18482850161023f565b91505092915050565b60006102b58261035b565b6102bf8185610366565b93506102cf818560208601610386565b6102d88161047a565b840191505092915050565b600060208201905081810360008301526102fd81846102aa565b905092915050565b600061030f610320565b905061031b82826103eb565b919050565b6000604051905090565b600067ffffffffffffffff8211156103455761034461044b565b5b61034e8261047a565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b82818337600083830152505050565b60005b838110156103a4578082015181840152602081019050610389565b838111156103b3576000848401525b50505050565b600060028204905060018216806103d157607f821691505b602082108114156103e5576103e461041c565b5b50919050565b6103f48261047a565b810181811067ffffffffffffffff821117156104135761041261044b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220779f79973b7af95fbcc59b3052077501d4c1251a76dc0b325b7c06f89f22a9a964736f6c63430008010033'

web3.eth.getTransactionCount(account1, (err, txCount) => {
  // Build the transaction
  const txObject = {
    nonce:    web3.utils.toHex(txCount),
    value:    web3.utils.toHex(web3.utils.toWei('0.1', 'ether')),
    gasLimit: web3.utils.toHex(1000000),
    gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei'))
  }

  // Sign the transaction
  var tx = new Tx(txObject, {'chain':'ropsten'})
  tx.sign(privateKey1Buffer)

  const serializedTx = tx.serialize()
  const raw = '0x' + serializedTx.toString('hex')
  
  // Broadcast the transaction
  web3.eth.sendSignedTransaction('0x' + serializedTx.toString('hex'))
  .then( receipt => {
    console.log('Receipt:', receipt);
  })
  .catch(e => {
    console.error('Error broadcasting the transaction: ', e);
  });
})